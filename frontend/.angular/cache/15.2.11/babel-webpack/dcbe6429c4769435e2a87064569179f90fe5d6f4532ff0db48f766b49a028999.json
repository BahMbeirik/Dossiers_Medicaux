{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  getHeaders() {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      // Redirect user if the token is missing\n      this.authService.logout();\n      this.router.navigate(['/login']);\n      throw new Error('Access token is missing.');\n    }\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n  }\n  register(userData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/auth/register/`, userData, {\n      headers\n    });\n  }\n  login(credentials) {\n    return this.http.post(`${environment.apiUrl}/auth/login/`, credentials);\n  }\n  verifyOTP(data) {\n    return this.http.post(`${environment.apiUrl}/auth/verify-otp/`, data);\n  }\n  isTokenValid(token) {\n    return this.http.post(`${environment.apiUrl}/auth/validate-token/`, {\n      token\n    }).pipe(map(response => response.valid), catchError(() => of(false)));\n  }\n  logout() {\n    localStorage.removeItem('access_token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAEC,GAAG,EAAcC,EAAE,QAAQ,MAAM;AACtD,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAGH,WAAW,CAACI,MAAM;EAEI;EAEvCC,UAAU;IACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,IAAI,CAACF,KAAK,EAAE;MACV;MACA,IAAI,CAACG,WAAW,CAACC,MAAM,EAAE;MACzB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;;IAG7C,OAAO,IAAIjB,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClCkB,aAAa,EAAE,UAAUR,KAAK;KAC/B,CAAC;EACJ;EAGAS,QAAQ,CAACC,QAAa;IACpB,MAAMC,OAAO,GAAG,IAAIrB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACO,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACd,MAAM,iBAAiB,EAAEY,QAAQ,EAAE;MAAEC;IAAO,CAAE,CAAC;EAC/E;EAEAE,KAAK,CAACC,WAAgD;IACpD,OAAO,IAAI,CAACjB,IAAI,CAACe,IAAI,CAAC,GAAGlB,WAAW,CAACI,MAAM,cAAc,EAAEgB,WAAW,CAAC;EACzE;EAEAC,SAAS,CAACC,IAAoC;IAC5C,OAAO,IAAI,CAACnB,IAAI,CAACe,IAAI,CAAC,GAAGlB,WAAW,CAACI,MAAM,mBAAmB,EAAEkB,IAAI,CAAC;EACvE;EAEAC,YAAY,CAACjB,KAAa;IACxB,OAAO,IAAI,CAACH,IAAI,CAACe,IAAI,CAAqB,GAAGlB,WAAW,CAACI,MAAM,uBAAuB,EAAE;MAAEE;IAAK,CAAE,CAAC,CAACkB,IAAI,CACrG1B,GAAG,CAAE2B,QAAQ,IAAKA,QAAQ,CAACC,KAAK,CAAC,EACjC7B,UAAU,CAAC,MAAME,EAAE,CAAC,KAAK,CAAC,CAAC,CAC5B;EACH;EAEAW,MAAM;IACJH,YAAY,CAACoB,UAAU,CAAC,cAAc,CAAC;EACzC;;;uBA5CW1B,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA2B,SAAX3B,WAAW;MAAA4B,YAFV;IAAM;EAAA","names":["HttpHeaders","catchError","map","of","environment","AuthService","constructor","http","apiUrl","getHeaders","token","localStorage","getItem","authService","logout","router","navigate","Error","Authorization","register","userData","headers","post","login","credentials","verifyOTP","data","isTokenValid","pipe","response","valid","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      // Redirect user if the token is missing\n      this.authService.logout();\n      this.router.navigate(['/login']);\n      throw new Error('Access token is missing.');\n    }\n  \n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n  }\n  \n\n  register(userData: any): Observable<any> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    return this.http.post(`${this.apiUrl}/auth/register/`, userData ,{ headers });\n  }\n\n  login(credentials: { email: string; password: string }): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/auth/login/`, credentials);\n  }\n\n  verifyOTP(data: { email: string; otp: string }): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/auth/verify-otp/`, data);\n  }\n\n  isTokenValid(token: string): Observable<boolean> {\n    return this.http.post<{ valid: boolean }>(`${environment.apiUrl}/auth/validate-token/`, { token }).pipe(\n      map((response) => response.valid),\n      catchError(() => of(false))\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('access_token');\n  }\n\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}