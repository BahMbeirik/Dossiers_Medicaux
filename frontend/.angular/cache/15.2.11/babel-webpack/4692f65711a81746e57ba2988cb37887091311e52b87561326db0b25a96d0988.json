{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n  }\n  /**\r\n   * Login API call\r\n   * @param credentials {email: string, password: string}\r\n   */\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login/`, credentials);\n  }\n  /**\r\n   * OTP Verification API call\r\n   * @param data {email: string, otp: string}\r\n   */\n  verifyOTP(data) {\n    return this.http.post(`${this.apiUrl}/verify-otp/`, data);\n  }\n  /**\r\n   * Refresh Token API call\r\n   * @param data {refresh: string}\r\n   */\n  refreshToken(data) {\n    return this.http.post(`${this.apiUrl}/refresh/`, data);\n  }\n  /**\r\n   * Logout the user\r\n   */\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    this.router.navigate(['/login']);\n  }\n  /**\r\n   * Store tokens in localStorage\r\n   * @param tokens {access: string, refresh: string}\r\n   */\n  setTokens(tokens) {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  }\n  /**\r\n   * Get the access token from localStorage\r\n   */\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n  /**\r\n   * Get the refresh token from localStorage\r\n   */\n  getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n  /**\r\n   * Check if the user is authenticated\r\n   */\n  isAuthenticated() {\n    return !!this.getAccessToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;;AAM5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,WAAM,GAAG,GAAGJ,WAAW,CAACK,MAAM,OAAO;EAEkB;EAE/D;;;;EAIAC,KAAK,CAACC,WAAgD;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,SAAS,EAAEE,WAAW,CAAC;EAClF;EAEA;;;;EAIAE,SAAS,CAACC,IAAoC;IAC5C,OAAO,IAAI,CAACP,IAAI,CAACK,IAAI,CAAkD,GAAG,IAAI,CAACH,MAAM,cAAc,EAAEK,IAAI,CAAC;EAC5G;EAEA;;;;EAIAC,YAAY,CAACD,IAAyB;IACpC,OAAO,IAAI,CAACP,IAAI,CAACK,IAAI,CAAsC,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEK,IAAI,CAAC;EAC7F;EAEA;;;EAGAE,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;IACvCD,YAAY,CAACC,UAAU,CAAC,eAAe,CAAC;IACxC,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEA;;;;EAIAC,SAAS,CAACC,MAA2C;IACnDJ,YAAY,CAACK,OAAO,CAAC,cAAc,EAAED,MAAM,CAACE,MAAM,CAAC;IACnDN,YAAY,CAACK,OAAO,CAAC,eAAe,EAAED,MAAM,CAACG,OAAO,CAAC;EACvD;EAEA;;;EAGAC,cAAc;IACZ,OAAOR,YAAY,CAACS,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEA;;;EAGAC,eAAe;IACb,OAAOV,YAAY,CAACS,OAAO,CAAC,eAAe,CAAC;EAC9C;EAEA;;;EAGAE,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACH,cAAc,EAAE;EAChC;;;uBAlEWpB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAwB,SAAXxB,WAAW;MAAAyB,YAFV;IAAM;EAAA","names":["environment","AuthService","constructor","http","router","apiUrl","login","credentials","post","verifyOTP","data","refreshToken","logout","localStorage","removeItem","navigate","setTokens","tokens","setItem","access","refresh","getAccessToken","getItem","getRefreshToken","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  /**\n   * Login API call\n   * @param credentials {email: string, password: string}\n   */\n  login(credentials: { email: string; password: string }): Observable<{ message: string }> {\n    return this.http.post<{ message: string }>(`${this.apiUrl}/login/`, credentials);\n  }\n\n  /**\n   * OTP Verification API call\n   * @param data {email: string, otp: string}\n   */\n  verifyOTP(data: { email: string; otp: string }): Observable<{ access_token: string; refresh_token: string }> {\n    return this.http.post<{ access_token: string; refresh_token: string }>(`${this.apiUrl}/verify-otp/`, data);\n  }\n\n  /**\n   * Refresh Token API call\n   * @param data {refresh: string}\n   */\n  refreshToken(data: { refresh: string }): Observable<{ access: string; refresh: string }> {\n    return this.http.post<{ access: string; refresh: string }>(`${this.apiUrl}/refresh/`, data);\n  }\n\n  /**\n   * Logout the user\n   */\n  logout(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Store tokens in localStorage\n   * @param tokens {access: string, refresh: string}\n   */\n  setTokens(tokens: { access: string; refresh: string }): void {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  }\n\n  /**\n   * Get the access token from localStorage\n   */\n  getAccessToken(): string | null {\n    return localStorage.getItem('access_token');\n  }\n\n  /**\n   * Get the refresh token from localStorage\n   */\n  getRefreshToken(): string | null {\n    return localStorage.getItem('refresh_token');\n  }\n\n  /**\n   * Check if the user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return !!this.getAccessToken();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}