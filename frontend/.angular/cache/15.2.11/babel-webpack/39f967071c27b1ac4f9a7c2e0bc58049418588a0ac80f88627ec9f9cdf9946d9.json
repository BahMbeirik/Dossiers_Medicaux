{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  register(userData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/auth/register/`, userData, {\n      headers\n    });\n  }\n  login(loginData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/auth/login/`, loginData, {\n      headers\n    });\n  }\n  verifyOTP(otpData) {\n    return this.http.post(`${this.apiUrl}/auth/verify-otp/`, otpData);\n  }\n  setTokens(tokens) {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  }\n  logout() {\n    const token = localStorage.getItem('access_token'); // Use the correct key\n    const headers = new HttpHeaders({\n      'Authorization': `Token ${token}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/auth/logout/`, {}, {\n      headers\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAGH,WAAW,CAACI,MAAM;EAEI;EAEvCC,QAAQ,CAACC,QAAa;IACpB,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACI,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,iBAAiB,EAAEE,QAAQ,EAAE;MAAEC;IAAO,CAAE,CAAC;EAC/E;EAEAE,KAAK,CAACC,SAAc;IAClB,MAAMH,OAAO,GAAG,IAAIR,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,OAAO,IAAI,CAACI,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,cAAc,EAAEM,SAAS,EAAE;MAACH;IAAO,CAAC,CAAC;EAC3E;EAEAI,SAAS,CAACC,OAAY;IACpB,OAAO,IAAI,CAACT,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,mBAAmB,EAAEQ,OAAO,CAAC;EACnE;EAEAC,SAAS,CAACC,MAA2C;IACnDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,MAAM,CAACG,MAAM,CAAC;IACnDF,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEF,MAAM,CAACI,OAAO,CAAC;EACvD;EAGAC,MAAM;IACJ,MAAMC,KAAK,GAAGL,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;IACpD,MAAMd,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC5B,eAAe,EAAE,SAASqB,KAAK,EAAE;MACjC,cAAc,EAAE;KACnB,CAAC;IACF,OAAO,IAAI,CAACjB,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,eAAe,EAAE,EAAE,EAAE;MAAEG;IAAO,CAAE,CAAC;EACvE;;;uBAjCWN,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAqB,SAAXrB,WAAW;MAAAsB,YAFV;IAAM;EAAA","names":["HttpHeaders","environment","AuthService","constructor","http","apiUrl","register","userData","headers","post","login","loginData","verifyOTP","otpData","setTokens","tokens","localStorage","setItem","access","refresh","logout","token","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  register(userData: any): Observable<any> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    return this.http.post(`${this.apiUrl}/auth/register/`, userData ,{ headers });\n  }\n\n  login(loginData: any): Observable<any> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    return this.http.post(`${this.apiUrl}/auth/login/`, loginData, {headers});\n  }\n\n  verifyOTP(otpData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/auth/verify-otp/`, otpData);\n  }\n\n  setTokens(tokens: { access: string, refresh: string }) {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  }\n\n\n  logout(): Observable<any> {\n    const token = localStorage.getItem('access_token'); // Use the correct key\n    const headers = new HttpHeaders({\n        'Authorization': `Token ${token}`,\n        'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/auth/logout/`, {}, { headers });\n  }\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}