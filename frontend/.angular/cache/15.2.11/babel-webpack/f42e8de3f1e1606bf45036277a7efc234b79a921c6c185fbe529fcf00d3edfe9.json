{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nfunction OtpVerificationComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"small\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ((tmp_0_0 = ctx_r0.otpForm.get(\"otp\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]) ? \"OTP is required\" : \"Invalid OTP format\", \" \");\n  }\n}\nfunction OtpVerificationComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorMessage, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"input-error\": a0\n  };\n};\nexport class OtpVerificationComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.isLoading = false;\n    this.errorMessage = null;\n    // Resend OTP countdown\n    this.resendCountdown = 0;\n    this.isResendDisabled = false;\n    this.otpForm = this.fb.group({\n      otp: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\n    });\n    // Get email from navigation state\n    const navigation = this.router.getCurrentNavigation();\n    this.email = navigation?.extras.state?.['email'] || '';\n  }\n  ngOnInit() {\n    if (!this.email) {\n      // Redirect to login if no email\n      this.router.navigate(['/login']);\n    }\n    this.startResendCountdown();\n  }\n  formatOTP(event) {\n    const input = event.target;\n    // Remove non-digit characters\n    input.value = input.value.replace(/\\D/g, '');\n  }\n  isOTPInvalid() {\n    const otpControl = this.otpForm.get('otp');\n    return !!(otpControl?.invalid && (otpControl?.dirty || otpControl?.touched));\n  }\n  onSubmit() {\n    if (this.otpForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n      this.authService.verifyOTP({\n        email: this.email,\n        otp: this.otpForm.value.otp\n      }).subscribe({\n        next: response => {\n          // Store tokens\n          this.authService.setTokens({\n            access: response.access,\n            refresh: response.refresh\n          });\n          // Navigate to dashboard or home\n          this.router.navigate(['/home']);\n          this.isLoading = false;\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'OTP verification failed';\n        }\n      });\n    }\n  }\n  startResendCountdown() {\n    this.resendCountdown = 60; // 60 seconds\n    this.isResendDisabled = true;\n    const timer = setInterval(() => {\n      this.resendCountdown--;\n      if (this.resendCountdown <= 0) {\n        clearInterval(timer);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n  resendOTP() {\n    if (this.isResendDisabled) return;\n    this.authService.login({\n      email: this.email,\n      // We'll reuse the login endpoint to generate a new OTP\n      password: '' // This would typically come from a stored/remembered password\n    }).subscribe({\n      next: () => {\n        this.startResendCountdown();\n        // Optional: Show a success message\n      },\n\n      error: error => {\n        this.errorMessage = 'Failed to resend OTP. Please try again.';\n      }\n    });\n  }\n  backToLogin() {\n    this.router.navigate(['/login']);\n  }\n  static {\n    this.ɵfac = function OtpVerificationComponent_Factory(t) {\n      return new (t || OtpVerificationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: OtpVerificationComponent,\n      selectors: [[\"app-otp-verification\"]],\n      decls: 18,\n      vars: 11,\n      consts: [[1, \"otp-container\"], [1, \"otp-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"otp-input-container\"], [\"type\", \"text\", \"formControlName\", \"otp\", \"maxlength\", \"6\", \"placeholder\", \"Enter OTP\", 3, \"ngClass\", \"input\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"class\", \"server-error\", 4, \"ngIf\"], [1, \"otp-actions\"], [\"type\", \"submit\", 3, \"disabled\"], [\"type\", \"button\", 1, \"resend-btn\", 3, \"disabled\", \"click\"], [1, \"back-to-login\"], [3, \"click\"], [1, \"error-message\"], [1, \"server-error\"]],\n      template: function OtpVerificationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function OtpVerificationComponent_Template_form_ngSubmit_1_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(2, \"h2\");\n          i0.ɵɵtext(3, \"OTP Verification\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\");\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 2)(7, \"input\", 3);\n          i0.ɵɵlistener(\"input\", function OtpVerificationComponent_Template_input_input_7_listener($event) {\n            return ctx.formatOTP($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, OtpVerificationComponent_div_8_Template, 3, 1, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(9, OtpVerificationComponent_div_9_Template, 2, 1, \"div\", 5);\n          i0.ɵɵelementStart(10, \"div\", 6)(11, \"button\", 7);\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function OtpVerificationComponent_Template_button_click_13_listener() {\n            return ctx.resendOTP();\n          });\n          i0.ɵɵtext(14);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 9)(16, \"a\", 10);\n          i0.ɵɵlistener(\"click\", function OtpVerificationComponent_Template_a_click_16_listener() {\n            return ctx.backToLogin();\n          });\n          i0.ɵɵtext(17, \"Back to Login\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.otpForm);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\"Enter the 6-digit code sent to \", ctx.email, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.isOTPInvalid()));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isOTPInvalid());\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.otpForm.invalid || ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Verifying...\" : \"Verify OTP\", \" \");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.isResendDisabled);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" Resend OTP \", ctx.resendCountdown > 0 ? ctx.resendCountdown + \"s\" : \"\", \" \");\n        }\n      },\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","OtpVerificationComponent","constructor","fb","authService","router","otpForm","group","otp","required","pattern","navigation","getCurrentNavigation","email","extras","state","ngOnInit","navigate","startResendCountdown","formatOTP","event","input","target","value","replace","isOTPInvalid","otpControl","get","invalid","dirty","touched","onSubmit","valid","isLoading","errorMessage","verifyOTP","subscribe","next","response","setTokens","access","refresh","error","resendCountdown","isResendDisabled","timer","setInterval","clearInterval","resendOTP","login","password","backToLogin","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\otp-verification\\otp-verification.component.ts","C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\otp-verification\\otp-verification.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-otp-verification',\n  templateUrl: './otp-verification.component.html',\n  styleUrls: ['./otp-verification.component.css']\n})\nexport class OtpVerificationComponent implements OnInit {\n  otpForm: FormGroup;\n  email: string = '';\n  isLoading = false;\n  errorMessage: string | null = null;\n  \n  // Resend OTP countdown\n  resendCountdown = 0;\n  isResendDisabled = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.otpForm = this.fb.group({\n      otp: ['', [\n        Validators.required, \n        Validators.pattern(/^\\d{6}$/)\n      ]]\n    });\n\n    // Get email from navigation state\n    const navigation = this.router.getCurrentNavigation();\n    this.email = navigation?.extras.state?.['email'] || '';\n  }\n\n  ngOnInit() {\n    if (!this.email) {\n      // Redirect to login if no email\n      this.router.navigate(['/login']);\n    }\n    this.startResendCountdown();\n  }\n\n  formatOTP(event: Event) {\n    const input = event.target as HTMLInputElement;\n    // Remove non-digit characters\n    input.value = input.value.replace(/\\D/g, '');\n  }\n\n  isOTPInvalid(): boolean {\n    const otpControl = this.otpForm.get('otp');\n    return !!(otpControl?.invalid && (otpControl?.dirty || otpControl?.touched));\n  }\n\n  onSubmit() {\n    if (this.otpForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n\n      this.authService.verifyOTP({\n        email: this.email,\n        otp: this.otpForm.value.otp\n      }).subscribe({\n        next: (response) => {\n          // Store tokens\n          this.authService.setTokens({\n            access: response.access,\n            refresh: response.refresh\n          });\n          \n          // Navigate to dashboard or home\n          this.router.navigate(['/home']);\n          this.isLoading = false;\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'OTP verification failed';\n        }\n      });\n    }\n  }\n\n  startResendCountdown() {\n    this.resendCountdown = 60; // 60 seconds\n    this.isResendDisabled = true;\n\n    const timer = setInterval(() => {\n      this.resendCountdown--;\n      \n      if (this.resendCountdown <= 0) {\n        clearInterval(timer);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n\n  resendOTP() {\n    if (this.isResendDisabled) return;\n\n    this.authService.login({ \n      email: this.email, \n      // We'll reuse the login endpoint to generate a new OTP\n      password: '' // This would typically come from a stored/remembered password\n    }).subscribe({\n      next: () => {\n        this.startResendCountdown();\n        // Optional: Show a success message\n      },\n      error: (error) => {\n        this.errorMessage = 'Failed to resend OTP. Please try again.';\n      }\n    });\n  }\n\n  backToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n","<div class=\"otp-container\">\n  <form [formGroup]=\"otpForm\" (ngSubmit)=\"onSubmit()\" class=\"otp-form\">\n    <h2>OTP Verification</h2>\n    <p>Enter the 6-digit code sent to {{ email }}</p>\n    \n    <div class=\"otp-input-container\">\n      <input \n        type=\"text\" \n        formControlName=\"otp\"\n        maxlength=\"6\"\n        placeholder=\"Enter OTP\"\n        (input)=\"formatOTP($event)\"\n        [ngClass]=\"{'input-error': isOTPInvalid()}\"\n      >\n      <div *ngIf=\"isOTPInvalid()\" class=\"error-message\">\n        <small>\n          {{ otpForm.get('otp')?.errors?.['required'] \n             ? 'OTP is required' \n             : 'Invalid OTP format' \n          }}\n        </small>\n      </div>\n    </div>\n\n    <div *ngIf=\"errorMessage\" class=\"server-error\">\n      {{ errorMessage }}\n    </div>\n\n    <div class=\"otp-actions\">\n      <button \n        type=\"submit\" \n        [disabled]=\"otpForm.invalid || isLoading\"\n      >\n        {{ isLoading ? 'Verifying...' : 'Verify OTP' }}\n      </button>\n\n      <button \n        type=\"button\" \n        class=\"resend-btn\"\n        (click)=\"resendOTP()\"\n        [disabled]=\"isResendDisabled\"\n      >\n        Resend OTP {{ resendCountdown > 0 ? resendCountdown + 's' : '' }}\n      </button>\n    </div>\n\n    <div class=\"back-to-login\">\n      <a (click)=\"backToLogin()\">Back to Login</a>\n    </div>\n  </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}