{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet OtpVerificationComponent = class OtpVerificationComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.isLoading = false;\n    this.errorMessage = null;\n    // Resend OTP countdown\n    this.resendCountdown = 120; // 120 seconds\n    this.isResendDisabled = false;\n    this.otpForm = this.fb.group({\n      otp: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\n    });\n    // Retrieve email from navigation state\n    const navigation = this.router.getCurrentNavigation();\n    this.email = navigation?.extras.state?.['email'] || '';\n  }\n  ngOnInit() {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      this.router.navigate(['/home']);\n    }\n    if (!this.email) {\n      // Redirect to login if no email is found\n      this.router.navigate(['/login']);\n    }\n    this.startResendCountdown();\n  }\n  /**\r\n   * Handle OTP submission\r\n   */\n  onSubmit() {\n    if (this.otpForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n      this.authService.verifyOTP({\n        email: this.email,\n        otp: this.otpForm.value.otp\n      }).subscribe({\n        next: response => {\n          // Store tokens and navigate to the home page\n          this.authService.setTokens(response);\n          this.router.navigate(['/home']);\n          this.isLoading = false;\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'OTP verification failed. Please try again.';\n        }\n      });\n    }\n  }\n  /**\r\n   * Start the resend countdown\r\n   */\n  startResendCountdown() {\n    this.isResendDisabled = true;\n    const timer = setInterval(() => {\n      this.resendCountdown--;\n      if (this.resendCountdown <= 0) {\n        clearInterval(timer);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n  /**\r\n   * Resend OTP\r\n   */\n  resendOTP() {\n    if (this.isResendDisabled) return;\n    this.authService.login({\n      email: this.email,\n      password: '' // Ideally fetched from secure storage if required\n    }).subscribe({\n      next: () => {\n        this.startResendCountdown();\n        // Optionally display a success message\n      },\n\n      error: error => {\n        this.errorMessage = 'Failed to resend OTP. Please try again.';\n      }\n    });\n  }\n  /**\r\n   * Navigate back to the login page\r\n   */\n  backToLogin() {\n    this.router.navigate(['/login']);\n  }\n};\nOtpVerificationComponent = __decorate([Component({\n  selector: 'app-otp-verification',\n  templateUrl: './otp-verification.component.html',\n  styleUrls: ['./otp-verification.component.css']\n})], OtpVerificationComponent);\nexport { OtpVerificationComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","OtpVerificationComponent","constructor","fb","authService","router","otpForm","group","otp","required","pattern","navigation","getCurrentNavigation","email","extras","state","ngOnInit","token","localStorage","getItem","navigate","startResendCountdown","onSubmit","valid","isLoading","errorMessage","verifyOTP","value","subscribe","next","response","setTokens","error","isResendDisabled","timer","setInterval","resendCountdown","clearInterval","resendOTP","login","password","backToLogin","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\otp-verification\\otp-verification.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-otp-verification',\n  templateUrl: './otp-verification.component.html',\n  styleUrls: ['./otp-verification.component.css']\n})\nexport class OtpVerificationComponent implements OnInit {\n  otpForm: FormGroup;\n  email: string = '';\n  isLoading = false;\n  errorMessage: string | null = null;\n  \n  // Resend OTP countdown\n  resendCountdown = 120; // 120 seconds\n  isResendDisabled = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.otpForm = this.fb.group({\n      otp: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\n    });\n\n    // Retrieve email from navigation state\n    const navigation = this.router.getCurrentNavigation();\n    this.email = navigation?.extras.state?.['email'] || '';\n  }\n\n  ngOnInit() {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      this.router.navigate(['/home']);\n    }\n\n    if (!this.email) {\n      // Redirect to login if no email is found\n      this.router.navigate(['/login']);\n    }\n    this.startResendCountdown();\n  }\n\n  /**\n   * Handle OTP submission\n   */\n  onSubmit() {\n    if (this.otpForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n\n      this.authService.verifyOTP({\n        email: this.email,\n        otp: this.otpForm.value.otp\n      }).subscribe({\n        next: (response) => {\n          // Store tokens and navigate to the home page\n          this.authService.setTokens(response);\n          this.router.navigate(['/home']);\n          this.isLoading = false;\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'OTP verification failed. Please try again.';\n        }\n      });\n    }\n  }\n\n  /**\n   * Start the resend countdown\n   */\n  startResendCountdown() {\n    this.isResendDisabled = true;\n\n    const timer = setInterval(() => {\n      this.resendCountdown--;\n\n      if (this.resendCountdown <= 0) {\n        clearInterval(timer);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n\n  /**\n   * Resend OTP\n   */\n  resendOTP() {\n    if (this.isResendDisabled) return;\n\n    this.authService.login({\n      email: this.email,\n      password: '' // Ideally fetched from secure storage if required\n    }).subscribe({\n      next: () => {\n        this.startResendCountdown();\n        // Optionally display a success message\n      },\n      error: (error) => {\n        this.errorMessage = 'Failed to resend OTP. Please try again.';\n      }\n    });\n  }\n\n  /**\n   * Navigate back to the login page\n   */\n  backToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}