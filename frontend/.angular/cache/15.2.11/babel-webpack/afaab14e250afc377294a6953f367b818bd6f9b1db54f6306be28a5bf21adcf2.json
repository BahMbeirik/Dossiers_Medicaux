{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PatientService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth/patients/`;\n  }\n  // Méthode privée pour obtenir les headers\n  getHeaders() {\n    const token = localStorage.getItem('access_token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      'Accept': 'application/json'\n    });\n  }\n  // Récupérer tous les patients\n  getPatients() {\n    const headers = this.getHeaders();\n    const options = {\n      headers: headers\n    };\n    return this.http.get(this.apiUrl, options).pipe(map(response => {\n      console.log('Patients récupérés:', response);\n      return response;\n    }), catchError(this.handleError));\n  }\n  // Récupérer un patient par ID\n  getPatient(id) {\n    const headers = this.getHeaders();\n    const options = {\n      headers: headers\n    };\n    return this.http.get(`${this.apiUrl}${id}/`, options).pipe(map(response => {\n      console.log('Patient récupéré:', response);\n      return response;\n    }), catchError(this.handleError));\n  }\n  // Créer un nouveau patient\n  createPatient(patient) {\n    const headers = this.getHeaders();\n    const options = {\n      headers: headers\n    };\n    console.log('Données envoyées au serveur:', patient);\n    return this.http.post(this.apiUrl, patient, options).pipe(map(response => {\n      console.log('Patient créé:', response);\n      return response;\n    }), catchError(this.handleError));\n  }\n  // Mettre à jour un patient\n  updatePatient(id, patient) {\n    const headers = this.getHeaders();\n    const options = {\n      headers: headers\n    };\n    console.log('Mise à jour patient:', patient);\n    return this.http.put(`${this.apiUrl}${id}/`, patient, options).pipe(map(response => {\n      console.log('Patient mis à jour:', response);\n      return response;\n    }), catchError(this.handleError));\n  }\n  // Supprimer un patient\n  deletePatient(id) {\n    const headers = this.getHeaders();\n    const options = {\n      headers: headers\n    };\n    return this.http.delete(`${this.apiUrl}${id}/`, options).pipe(map(response => {\n      console.log('Patient supprimé');\n      return response;\n    }), catchError(this.handleError));\n  }\n  // Gestionnaire d'erreurs amélioré\n  handleError(error) {\n    let errorMessage = 'Une erreur est survenue';\n    if (error.error instanceof ErrorEvent) {\n      // Erreur côté client\n      errorMessage = `Erreur: ${error.error.message}`;\n    } else {\n      // Erreur côté serveur\n      switch (error.status) {\n        case 401:\n          errorMessage = 'Session expirée - Veuillez vous reconnecter';\n          // Vous pouvez ajouter ici une redirection vers la page de login\n          break;\n        case 403:\n          errorMessage = 'Accès non autorisé';\n          break;\n        case 404:\n          errorMessage = 'Patient non trouvé';\n          break;\n        case 400:\n          errorMessage = 'Données invalides';\n          if (error.error) {\n            errorMessage += `: ${JSON.stringify(error.error)}`;\n          }\n          break;\n        case 500:\n          errorMessage = 'Erreur serveur';\n          break;\n        default:\n          errorMessage = `Erreur ${error.status}: ${error.error?.message || error.message}`;\n      }\n    }\n    console.error('Erreur détaillée:', error);\n    console.error('Message d\\'erreur:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function PatientService_Factory(t) {\n      return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PatientService,\n      factory: PatientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","map","environment","PatientService","constructor","http","apiUrl","getHeaders","token","localStorage","getItem","getPatients","headers","options","get","pipe","response","console","log","handleError","getPatient","id","createPatient","patient","post","updatePatient","put","deletePatient","delete","error","errorMessage","ErrorEvent","message","status","JSON","stringify","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\services\\patient.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface Patient {\n  id?: number;\n  numero_identite: number;\n  nom: string;\n  prenom: string;\n  age: number;\n  numero_telephone: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n  private apiUrl = `${environment.apiUrl}/auth/patients/`;\n\n  constructor(private http: HttpClient) {}\n\n\n\n    // Méthode privée pour obtenir les headers\n    private getHeaders(): HttpHeaders {\n        const token = localStorage.getItem('access_token');\n        return new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'Accept': 'application/json'\n        });\n    }\n\n    // Récupérer tous les patients\n    getPatients(): Observable<Patient[]> {\n        const headers = this.getHeaders();\n        const options = { headers: headers };\n\n        return this.http.get<Patient[]>(this.apiUrl, options)\n            .pipe(\n                map(response => {\n                    console.log('Patients récupérés:', response);\n                    return response;\n                }),\n                catchError(this.handleError)\n            );\n    }\n\n    // Récupérer un patient par ID\n    getPatient(id: number): Observable<Patient> {\n        const headers = this.getHeaders();\n        const options = { headers: headers };\n\n        return this.http.get<Patient>(`${this.apiUrl}${id}/`, options)\n            .pipe(\n                map(response => {\n                    console.log('Patient récupéré:', response);\n                    return response;\n                }),\n                catchError(this.handleError)\n            );\n    }\n\n    // Créer un nouveau patient\n    createPatient(patient: Patient): Observable<Patient> {\n        const headers = this.getHeaders();\n        const options = { headers: headers };\n        \n        console.log('Données envoyées au serveur:', patient);\n        return this.http.post<Patient>(this.apiUrl, patient, options)\n            .pipe(\n                map(response => {\n                    console.log('Patient créé:', response);\n                    return response;\n                }),\n                catchError(this.handleError)\n            );\n    }\n\n    // Mettre à jour un patient\n    updatePatient(id: number, patient: Patient): Observable<Patient> {\n        const headers = this.getHeaders();\n        const options = { headers: headers };\n\n        console.log('Mise à jour patient:', patient);\n        return this.http.put<Patient>(`${this.apiUrl}${id}/`, patient, options)\n            .pipe(\n                map(response => {\n                    console.log('Patient mis à jour:', response);\n                    return response;\n                }),\n                catchError(this.handleError)\n            );\n    }\n\n    // Supprimer un patient\n    deletePatient(id: number): Observable<void> {\n        const headers = this.getHeaders();\n        const options = { headers: headers };\n\n        return this.http.delete<void>(`${this.apiUrl}${id}/`, options)\n            .pipe(\n                map(response => {\n                    console.log('Patient supprimé');\n                    return response;\n                }),\n                catchError(this.handleError)\n            );\n    }\n\n    // Gestionnaire d'erreurs amélioré\n    private handleError(error: HttpErrorResponse) {\n        let errorMessage = 'Une erreur est survenue';\n\n        if (error.error instanceof ErrorEvent) {\n            // Erreur côté client\n            errorMessage = `Erreur: ${error.error.message}`;\n        } else {\n            // Erreur côté serveur\n            switch (error.status) {\n                case 401:\n                    errorMessage = 'Session expirée - Veuillez vous reconnecter';\n                    // Vous pouvez ajouter ici une redirection vers la page de login\n                    break;\n                case 403:\n                    errorMessage = 'Accès non autorisé';\n                    break;\n                case 404:\n                    errorMessage = 'Patient non trouvé';\n                    break;\n                case 400:\n                    errorMessage = 'Données invalides';\n                    if (error.error) {\n                        errorMessage += `: ${JSON.stringify(error.error)}`;\n                    }\n                    break;\n                case 500:\n                    errorMessage = 'Erreur serveur';\n                    break;\n                default:\n                    errorMessage = `Erreur ${error.status}: ${error.error?.message || error.message}`;\n            }\n        }\n\n        console.error('Erreur détaillée:', error);\n        console.error('Message d\\'erreur:', errorMessage);\n        return throwError(() => new Error(errorMessage));\n    }\n}\n\n//   /**\n//    * إعداد الهيدرز مع توكن المصادقة\n//    */\n//   private getHeaders(): HttpHeaders {\n//     const token = localStorage.getItem('access_token');\n//     if (!token) {\n//       throw new Error('Access token is missing.');\n//     }\n//     return new HttpHeaders({\n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`\n//     });\n//   }\n\n//   /**\n//    * جلب جميع المرضى\n//    */\n//   getPatients(): Observable<Patient[]> {\n//     return this.http.get<Patient[]>(this.apiUrl, { headers: this.getHeaders() }).pipe(\n//       catchError(this.handleError)\n//     );\n//   }\n\n//   /**\n//    * جلب مريض حسب المعرف\n//    */\n//   getPatientById(id: number): Observable<Patient> {\n//     return this.http.get<Patient>(`${this.apiUrl}${id}/`, { headers: this.getHeaders() }).pipe(\n//       catchError(this.handleError)\n//     );\n//   }\n\n//   /**\n//    * إضافة مريض جديد\n//    */\n//   addPatient(patient: Patient): Observable<Patient> {\n//     const headers = this.getHeaders();  \n//     return this.http.post<Patient>(this.apiUrl, patient, { headers }).pipe(\n//       catchError(this.handleError)\n//     );\n// }\n\n\n//   /**\n//    * تعديل بيانات مريض\n//    */\n//   updatePatient(patient: Patient): Observable<Patient> {\n//     return this.http.put<Patient>(`${this.apiUrl}${patient.id}/`, patient, { headers: this.getHeaders() }).pipe(\n//       catchError(this.handleError)\n//     );\n//   }\n\n//   /**\n//    * حذف مريض\n//    */\n//   deletePatient(id: number): Observable<void> {\n//     return this.http.delete<void>(`${this.apiUrl}${id}/`, { headers: this.getHeaders() }).pipe(\n//       catchError(this.handleError)\n//     );\n//   }\n\n//   /**\n//    * معالجة الأخطاء\n//    */\n//   private handleError(error: any): Observable<never> {\n//     let errorMsg: string;\n//     if (error.status === 400) {\n//       errorMsg = 'Invalid data submitted.';\n//     } else if (error.status === 401) {\n//       errorMsg = 'Unauthorized access. Please log in again.';\n//     } else {\n//       errorMsg = 'Something went wrong. Please try again.';\n//     }\n//     console.error('PatientService Error:', error);\n//     return throwError(() => new Error(errorMsg));\n//   }\n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}