{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.isLoading = false;\n    this.errorMessage = null;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n  isFieldInvalid(field) {\n    const formField = this.loginForm.get(field);\n    return !!(formField?.invalid && (formField?.dirty || formField?.touched));\n  }\n  onSubmit() {\n    if (this.loginForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n      this.authService.login(this.loginForm.value).subscribe({\n        next: response => {\n          // Navigate to OTP verification page\n          this.router.navigate(['/verify-otp'], {\n            state: {\n              email: this.loginForm.value.email\n            }\n          });\n          this.isLoading = false;\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'Login failed. Please try again.';\n        }\n      });\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,OAAE,GAAFF,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IANhB,cAAS,GAAG,KAAK;IACjB,iBAAY,GAAkB,IAAI;IAOhC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACQ,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,CAAC;KACrC,CAAC;EACJ;EAEAE,cAAc,CAACC,KAAa;IAC1B,MAAMC,SAAS,GAAG,IAAI,CAACP,SAAS,CAACQ,GAAG,CAACF,KAAK,CAAC;IAC3C,OAAO,CAAC,EAAEC,SAAS,EAAEE,OAAO,KAAKF,SAAS,EAAEG,KAAK,IAAIH,SAAS,EAAEI,OAAO,CAAC,CAAC;EAC3E;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACZ,SAAS,CAACa,KAAK,EAAE;MACxB,IAAI,CAACC,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,YAAY,GAAG,IAAI;MAExB,IAAI,CAACjB,WAAW,CAACkB,KAAK,CAAC,IAAI,CAAChB,SAAS,CAACiB,KAAK,CAAC,CAACC,SAAS,CAAC;QACrDC,IAAI,EAAGC,QAAQ,IAAI;UACjB;UACA,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE;YACpCC,KAAK,EAAE;cACLpB,KAAK,EAAE,IAAI,CAACF,SAAS,CAACiB,KAAK,CAACf;;WAE/B,CAAC;UACF,IAAI,CAACY,SAAS,GAAG,KAAK;QACxB,CAAC;QACDS,KAAK,EAAGA,KAAK,IAAI;UACf,IAAI,CAACT,SAAS,GAAG,KAAK;UACtB,IAAI,CAACC,YAAY,GAAGQ,KAAK,CAACA,KAAK,EAAEA,KAAK,IAAI,iCAAiC;QAC7E;OACD,CAAC;;EAEN;CACD;AA3CY5B,cAAc,eAL1BF,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW/B,cAAc,CA2C1B;SA3CYA,cAAc","names":["Component","Validators","LoginComponent","constructor","fb","authService","router","loginForm","group","email","required","password","isFieldInvalid","field","formField","get","invalid","dirty","touched","onSubmit","valid","isLoading","errorMessage","login","value","subscribe","next","response","navigate","state","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  isLoading = false;\n  errorMessage: string | null = null;\n\n  constructor(\n    private fb: FormBuilder, \n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  isFieldInvalid(field: string): boolean {\n    const formField = this.loginForm.get(field);\n    return !!(formField?.invalid && (formField?.dirty || formField?.touched));\n  }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n\n      this.authService.login(this.loginForm.value).subscribe({\n        next: (response) => {\n          // Navigate to OTP verification page\n          this.router.navigate(['/verify-otp'], { \n            state: { \n              email: this.loginForm.value.email \n            } \n          });\n          this.isLoading = false;\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'Login failed. Please try again.';\n        }\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}