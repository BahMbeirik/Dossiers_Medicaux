{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PatientService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  getHeaders() {\n    const token = localStorage.getItem('authToken'); // Assurez-vous que le jeton est stocké dans `localStorage`\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}` // Ou `Token ${token}` si vous utilisez TokenAuthentication\n    });\n  }\n\n  getPatients() {\n    return this.http.get(`${this.apiUrl}/auth/patients/`, {\n      headers: this.getHeaders()\n    });\n  }\n  getPatientById(id) {\n    return this.http.get(`${this.apiUrl}/auth/patients/${id}/`, {\n      headers: this.getHeaders()\n    });\n  }\n  addPatient(patient) {\n    console.log;\n    return this.http.post(`${this.apiUrl}/auth/patients/`, patient, {\n      headers: this.getHeaders()\n    });\n  }\n  updatePatient(patient) {\n    return this.http.put(`${this.apiUrl}/auth/patients/${patient.id}/`, patient, {\n      headers: this.getHeaders()\n    });\n  }\n  deletePatient(id) {\n    return this.http.delete(`${this.apiUrl}/auth/patients/${id}/`, {\n      headers: this.getHeaders()\n    });\n  }\n  static {\n    this.ɵfac = function PatientService_Factory(t) {\n      return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PatientService,\n      factory: PatientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,gCAAgC;;;AAc5D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAGH,WAAW,CAACI,MAAM;EAEI;EAI/BC,UAAU;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IACjD,OAAO,IAAIT,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClCU,aAAa,EAAE,UAAUH,KAAK,EAAE,CAAC;KAClC,CAAC;EACJ;;EAEAI,WAAW;IACT,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAY,GAAG,IAAI,CAACP,MAAM,iBAAiB,EAAE;MAAEQ,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EAClG;EAEAQ,cAAc,CAACC,EAAU;IACvB,OAAO,IAAI,CAACX,IAAI,CAACQ,GAAG,CAAU,GAAG,IAAI,CAACP,MAAM,kBAAkBU,EAAE,GAAG,EAAE;MAAEF,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACtG;EAEAU,UAAU,CAACC,OAAgB;IACzBC,OAAO,CAACC,GAAG;IACX,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAU,GAAG,IAAI,CAACf,MAAM,iBAAiB,EAAEY,OAAO,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EAC1G;EAEAe,aAAa,CAACJ,OAAgB;IAC5B,OAAO,IAAI,CAACb,IAAI,CAACkB,GAAG,CAAU,GAAG,IAAI,CAACjB,MAAM,kBAAkBY,OAAO,CAACF,EAAE,GAAG,EAAEE,OAAO,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACvH;EAEAiB,aAAa,CAACR,EAAU;IACtB,OAAO,IAAI,CAACX,IAAI,CAACoB,MAAM,CAAO,GAAG,IAAI,CAACnB,MAAM,kBAAkBU,EAAE,GAAG,EAAE;MAAEF,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACtG;;;uBAlCWJ,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAuB,SAAdvB,cAAc;MAAAwB,YAFb;IAAM;EAAA","names":["HttpHeaders","environment","PatientService","constructor","http","apiUrl","getHeaders","token","localStorage","getItem","Authorization","getPatients","get","headers","getPatientById","id","addPatient","patient","console","log","post","updatePatient","put","deletePatient","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\services\\patient.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface Patient {\n  id: number;\n  numero_identite: string;\n  nom: string;\n  prenom: string;\n  age: number;\n  numero_telephone: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  \n  \n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('authToken'); // Assurez-vous que le jeton est stocké dans `localStorage`\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}` // Ou `Token ${token}` si vous utilisez TokenAuthentication\n    });\n  }\n  \n  getPatients(): Observable<Patient[]> {\n    return this.http.get<Patient[]>(`${this.apiUrl}/auth/patients/`, { headers: this.getHeaders() });\n  }\n  \n  getPatientById(id: number): Observable<Patient> {\n    return this.http.get<Patient>(`${this.apiUrl}/auth/patients/${id}/`, { headers: this.getHeaders() });\n  }\n  \n  addPatient(patient: Patient): Observable<Patient> {\n    console.log)\n    return this.http.post<Patient>(`${this.apiUrl}/auth/patients/`, patient, { headers: this.getHeaders() });\n  }\n  \n  updatePatient(patient: Patient): Observable<Patient> {\n    return this.http.put<Patient>(`${this.apiUrl}/auth/patients/${patient.id}/`, patient, { headers: this.getHeaders() });\n  }\n  \n  deletePatient(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/auth/patients/${id}/`, { headers: this.getHeaders() });\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}