{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PatientService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth/patients/`;\n  }\n  /**\r\n   * إعداد الهيدرز مع توكن المصادقة\r\n   */\n  getHeaders() {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      throw new Error('Access token is missing.');\n    }\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n  }\n  /**\r\n   * جلب جميع المرضى\r\n   */\n  getPatients() {\n    return this.http.get(this.apiUrl, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\r\n   * جلب مريض حسب المعرف\r\n   */\n  getPatientById(id) {\n    return this.http.get(`${this.apiUrl}${id}/`, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\r\n   * إضافة مريض جديد\r\n   */\n  addPatient(patient) {\n    return this.http.post(this.apiUrl, patient, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\r\n   * تعديل بيانات مريض\r\n   */\n  updatePatient(patient) {\n    return this.http.put(`${this.apiUrl}${patient.id}/`, patient, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\r\n   * حذف مريض\r\n   */\n  deletePatient(id) {\n    return this.http.delete(`${this.apiUrl}${id}/`, {\n      headers: this.getHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  static {\n    this.ɵfac = function PatientService_Factory(t) {\n      return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PatientService,\n      factory: PatientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAc5D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,iBAAiB;EAEhB;EAEvC;;;EAGQC,UAAU;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,0BAA0B,CAAC;;IAE7C,OAAO,IAAIX,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClCY,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;EACJ;EAGA;;;EAGAK,WAAW;IACT,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAY,IAAI,CAACR,MAAM,EAAE;MAAES,OAAO,EAAE,IAAI,CAACR,UAAU;IAAE,CAAE,CAAC,CAACS,IAAI,CAC/Ef,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEA;;;EAGAC,cAAc,CAACC,EAAU;IACvB,OAAO,IAAI,CAACd,IAAI,CAACS,GAAG,CAAU,GAAG,IAAI,CAACR,MAAM,GAAGa,EAAE,GAAG,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACR,UAAU;IAAE,CAAE,CAAC,CAACS,IAAI,CACxFf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEA;;;EAGAG,UAAU,CAACC,OAAgB;IACzB,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAU,IAAI,CAAChB,MAAM,EAAEe,OAAO,EAAE;MAAEN,OAAO,EAAE,IAAI,CAACR,UAAU;IAAE,CAAE,CAAC,CAACS,IAAI,CACvFf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEA;;;EAGAM,aAAa,CAACF,OAAgB;IAC5B,OAAO,IAAI,CAAChB,IAAI,CAACmB,GAAG,CAAU,GAAG,IAAI,CAAClB,MAAM,GAAGe,OAAO,CAACF,EAAE,GAAG,EAAEE,OAAO,EAAE;MAAEN,OAAO,EAAE,IAAI,CAACR,UAAU;IAAE,CAAE,CAAC,CAACS,IAAI,CACzGf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEA;;;EAGAQ,aAAa,CAACN,EAAU;IACtB,OAAO,IAAI,CAACd,IAAI,CAACqB,MAAM,CAAO,GAAG,IAAI,CAACpB,MAAM,GAAGa,EAAE,GAAG,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACR,UAAU;IAAE,CAAE,CAAC,CAACS,IAAI,CACxFf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;;;uBA/DWd,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAwB,SAAdxB,cAAc;MAAAyB,YAFb;IAAM;EAAA","names":["HttpHeaders","catchError","environment","PatientService","constructor","http","apiUrl","getHeaders","token","localStorage","getItem","Error","Authorization","getPatients","get","headers","pipe","handleError","getPatientById","id","addPatient","patient","post","updatePatient","put","deletePatient","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\services\\patient.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface Patient {\n  id: number;\n  numero_identite: string;\n  nom: string;\n  prenom: string;\n  age: number;\n  numero_telephone: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n  private apiUrl = `${environment.apiUrl}/auth/patients/`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * إعداد الهيدرز مع توكن المصادقة\n   */\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      throw new Error('Access token is missing.');\n    }\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n  }\n  \n\n  /**\n   * جلب جميع المرضى\n   */\n  getPatients(): Observable<Patient[]> {\n    return this.http.get<Patient[]>(this.apiUrl, { headers: this.getHeaders() }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * جلب مريض حسب المعرف\n   */\n  getPatientById(id: number): Observable<Patient> {\n    return this.http.get<Patient>(`${this.apiUrl}${id}/`, { headers: this.getHeaders() }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * إضافة مريض جديد\n   */\n  addPatient(patient: Patient): Observable<Patient> {\n    return this.http.post<Patient>(this.apiUrl, patient, { headers: this.getHeaders() }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * تعديل بيانات مريض\n   */\n  updatePatient(patient: Patient): Observable<Patient> {\n    return this.http.put<Patient>(`${this.apiUrl}${patient.id}/`, patient, { headers: this.getHeaders() }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * حذف مريض\n   */\n  deletePatient(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}${id}/`, { headers: this.getHeaders() }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  \n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}