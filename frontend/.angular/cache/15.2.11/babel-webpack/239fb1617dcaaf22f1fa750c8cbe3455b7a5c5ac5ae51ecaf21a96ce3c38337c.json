{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet OtpVerificationComponent = class OtpVerificationComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.isLoading = false;\n    this.errorMessage = null;\n    // Resend OTP countdown\n    this.resendCountdown = 0;\n    this.isResendDisabled = false;\n    this.otpForm = this.fb.group({\n      otp: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\n    });\n    // Get email from navigation state\n    const navigation = this.router.getCurrentNavigation();\n    this.email = navigation?.extras.state?.['email'] || '';\n  }\n  ngOnInit() {\n    if (!this.email) {\n      // Redirect to login if no email\n      this.router.navigate(['/login']);\n    }\n    this.startResendCountdown();\n  }\n  formatOTP(event) {\n    const input = event.target;\n    // Remove non-digit characters\n    input.value = input.value.replace(/\\D/g, '');\n  }\n  isOTPInvalid() {\n    const otpControl = this.otpForm.get('otp');\n    return !!(otpControl?.invalid && (otpControl?.dirty || otpControl?.touched));\n  }\n  onSubmit() {\n    if (this.otpForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n      this.authService.verifyOTP({\n        email: this.email,\n        otp: this.otpForm.value.otp\n      }).subscribe({\n        next: response => {\n          // Store tokens\n          this.authService.setTokens({\n            access: response.access,\n            refresh: response.refresh\n          });\n          // Navigate to dashboard or home\n          this.router.navigate(['/dashboard']);\n          this.isLoading = false;\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'OTP verification failed';\n        }\n      });\n    }\n  }\n  startResendCountdown() {\n    this.resendCountdown = 60; // 60 seconds\n    this.isResendDisabled = true;\n    const timer = setInterval(() => {\n      this.resendCountdown--;\n      if (this.resendCountdown <= 0) {\n        clearInterval(timer);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n  resendOTP() {\n    if (this.isResendDisabled) return;\n    this.authService.login({\n      email: this.email,\n      // We'll reuse the login endpoint to generate a new OTP\n      password: '' // This would typically come from a stored/remembered password\n    }).subscribe({\n      next: () => {\n        this.startResendCountdown();\n        // Optional: Show a success message\n      },\n\n      error: error => {\n        this.errorMessage = 'Failed to resend OTP. Please try again.';\n      }\n    });\n  }\n  backToLogin() {\n    this.router.navigate(['/login']);\n  }\n};\nOtpVerificationComponent = __decorate([Component({\n  selector: 'app-otp-verification',\n  templateUrl: './otp-verification.component.html',\n  styleUrls: ['./otp-verification.component.css']\n})], OtpVerificationComponent);\nexport { OtpVerificationComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","OtpVerificationComponent","constructor","fb","authService","router","otpForm","group","otp","required","pattern","navigation","getCurrentNavigation","email","extras","state","ngOnInit","navigate","startResendCountdown","formatOTP","event","input","target","value","replace","isOTPInvalid","otpControl","get","invalid","dirty","touched","onSubmit","valid","isLoading","errorMessage","verifyOTP","subscribe","next","response","setTokens","access","refresh","error","resendCountdown","isResendDisabled","timer","setInterval","clearInterval","resendOTP","login","password","backToLogin","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\Dossiers Medicaux\\frontend\\src\\app\\otp-verification\\otp-verification.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-otp-verification',\n  templateUrl: './otp-verification.component.html',\n  styleUrls: ['./otp-verification.component.css']\n})\nexport class OtpVerificationComponent implements OnInit {\n  otpForm: FormGroup;\n  email: string = '';\n  isLoading = false;\n  errorMessage: string | null = null;\n  \n  // Resend OTP countdown\n  resendCountdown = 0;\n  isResendDisabled = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.otpForm = this.fb.group({\n      otp: ['', [\n        Validators.required, \n        Validators.pattern(/^\\d{6}$/)\n      ]]\n    });\n\n    // Get email from navigation state\n    const navigation = this.router.getCurrentNavigation();\n    this.email = navigation?.extras.state?.['email'] || '';\n  }\n\n  ngOnInit() {\n    if (!this.email) {\n      // Redirect to login if no email\n      this.router.navigate(['/login']);\n    }\n    this.startResendCountdown();\n  }\n\n  formatOTP(event: Event) {\n    const input = event.target as HTMLInputElement;\n    // Remove non-digit characters\n    input.value = input.value.replace(/\\D/g, '');\n  }\n\n  isOTPInvalid(): boolean {\n    const otpControl = this.otpForm.get('otp');\n    return !!(otpControl?.invalid && (otpControl?.dirty || otpControl?.touched));\n  }\n\n  onSubmit() {\n    if (this.otpForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = null;\n\n      this.authService.verifyOTP({\n        email: this.email,\n        otp: this.otpForm.value.otp\n      }).subscribe({\n        next: (response) => {\n          // Store tokens\n          this.authService.setTokens({\n            access: response.access,\n            refresh: response.refresh\n          });\n          \n          // Navigate to dashboard or home\n          this.router.navigate(['/dashboard']);\n          this.isLoading = false;\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.error || 'OTP verification failed';\n        }\n      });\n    }\n  }\n\n  startResendCountdown() {\n    this.resendCountdown = 60; // 60 seconds\n    this.isResendDisabled = true;\n\n    const timer = setInterval(() => {\n      this.resendCountdown--;\n      \n      if (this.resendCountdown <= 0) {\n        clearInterval(timer);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n\n  resendOTP() {\n    if (this.isResendDisabled) return;\n\n    this.authService.login({ \n      email: this.email, \n      // We'll reuse the login endpoint to generate a new OTP\n      password: '' // This would typically come from a stored/remembered password\n    }).subscribe({\n      next: () => {\n        this.startResendCountdown();\n        // Optional: Show a success message\n      },\n      error: (error) => {\n        this.errorMessage = 'Failed to resend OTP. Please try again.';\n      }\n    });\n  }\n\n  backToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}